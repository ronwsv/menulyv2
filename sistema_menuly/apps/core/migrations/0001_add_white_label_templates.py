# Generated by Django 5.2.4 on 2025-08-01 13:38

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("restaurantes", "0002_add_white_label_templates"),
    ]

    operations = [
        migrations.CreateModel(
            name="TemaRestaurante",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo_tema",
                    models.CharField(
                        choices=[
                            ("moderno", "Moderno"),
                            ("classico", "Clássico"),
                            ("minimalista", "Minimalista"),
                            ("colorido", "Colorido"),
                            ("elegante", "Elegante"),
                            ("casual", "Casual"),
                            ("premium", "Premium"),
                        ],
                        default="moderno",
                        max_length=20,
                        verbose_name="Tipo do Tema",
                    ),
                ),
                (
                    "nome_personalizado",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nome Personalizado do Tema",
                    ),
                ),
                (
                    "cor_primaria",
                    models.CharField(
                        default="#007bff",
                        help_text="Cor principal do tema (ex: #007bff)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de cor inválido. Use #RRGGBB ou #RGB",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            )
                        ],
                        verbose_name="Cor Primária",
                    ),
                ),
                (
                    "cor_secundaria",
                    models.CharField(
                        default="#6c757d",
                        help_text="Cor secundária do tema (ex: #6c757d)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de cor inválido. Use #RRGGBB ou #RGB",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            )
                        ],
                        verbose_name="Cor Secundária",
                    ),
                ),
                (
                    "cor_fundo",
                    models.CharField(
                        default="#ffffff",
                        help_text="Cor de fundo da página (ex: #ffffff)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de cor inválido. Use #RRGGBB ou #RGB",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            )
                        ],
                        verbose_name="Cor de Fundo",
                    ),
                ),
                (
                    "cor_texto",
                    models.CharField(
                        default="#212529",
                        help_text="Cor principal do texto (ex: #212529)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de cor inválido. Use #RRGGBB ou #RGB",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            )
                        ],
                        verbose_name="Cor do Texto",
                    ),
                ),
                (
                    "cor_botao",
                    models.CharField(
                        default="#28a745",
                        help_text="Cor dos botões de ação (ex: #28a745)",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de cor inválido. Use #RRGGBB ou #RGB",
                                regex="^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
                            )
                        ],
                        verbose_name="Cor dos Botões",
                    ),
                ),
                (
                    "fonte_primaria",
                    models.CharField(
                        default="Roboto, sans-serif",
                        help_text="Fonte principal do site",
                        max_length=100,
                        verbose_name="Fonte Primária",
                    ),
                ),
                (
                    "fonte_secundaria",
                    models.CharField(
                        default="Open Sans, sans-serif",
                        help_text="Fonte para títulos e destaques",
                        max_length=100,
                        verbose_name="Fonte Secundária",
                    ),
                ),
                (
                    "tamanho_fonte_base",
                    models.IntegerField(
                        default=16,
                        help_text="Tamanho base da fonte em pixels",
                        verbose_name="Tamanho Base da Fonte (px)",
                    ),
                ),
                (
                    "largura_maxima",
                    models.IntegerField(
                        default=1200,
                        help_text="Largura máxima do conteúdo em pixels",
                        verbose_name="Largura Máxima (px)",
                    ),
                ),
                (
                    "espacamento_geral",
                    models.IntegerField(
                        default=15,
                        help_text="Espaçamento padrão entre elementos",
                        verbose_name="Espaçamento Geral (px)",
                    ),
                ),
                (
                    "border_radius",
                    models.IntegerField(
                        default=8,
                        help_text="Arredondamento dos cantos em pixels",
                        verbose_name="Raio da Borda (px)",
                    ),
                ),
                (
                    "logo_principal",
                    models.ImageField(
                        blank=True,
                        help_text="Logo principal do restaurante",
                        null=True,
                        upload_to="temas/logos/",
                        verbose_name="Logo Principal",
                    ),
                ),
                (
                    "logo_pequeno",
                    models.ImageField(
                        blank=True,
                        help_text="Logo pequeno para cabeçalho compacto",
                        null=True,
                        upload_to="temas/logos/",
                        verbose_name="Logo Pequeno",
                    ),
                ),
                (
                    "favicon",
                    models.ImageField(
                        blank=True,
                        help_text="Ícone da aba do navegador (16x16 ou 32x32 px)",
                        null=True,
                        upload_to="temas/favicons/",
                        verbose_name="Favicon",
                    ),
                ),
                (
                    "imagem_fundo_hero",
                    models.ImageField(
                        blank=True,
                        help_text="Imagem de fundo da seção principal",
                        null=True,
                        upload_to="temas/backgrounds/",
                        verbose_name="Imagem de Fundo Hero",
                    ),
                ),
                (
                    "css_personalizado",
                    models.TextField(
                        blank=True,
                        help_text="CSS adicional para customizações avançadas",
                        null=True,
                        verbose_name="CSS Personalizado",
                    ),
                ),
                (
                    "javascript_personalizado",
                    models.TextField(
                        blank=True,
                        help_text="JavaScript adicional para funcionalidades específicas",
                        null=True,
                        verbose_name="JavaScript Personalizado",
                    ),
                ),
                ("ativo", models.BooleanField(default=True, verbose_name="Tema Ativo")),
                (
                    "criado_em",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "atualizado_em",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "restaurante",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tema",
                        to="restaurantes.restaurante",
                        verbose_name="Restaurante",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tema do Restaurante",
                "verbose_name_plural": "Temas dos Restaurantes",
                "db_table": "temas_restaurantes",
            },
        ),
        migrations.CreateModel(
            name="ComponentePersonalizado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tipo_componente",
                    models.CharField(
                        choices=[
                            ("header", "Cabeçalho"),
                            ("footer", "Rodapé"),
                            ("menu", "Menu de Navegação"),
                            ("banner", "Banner Principal"),
                            ("galeria", "Galeria de Fotos"),
                            ("contato", "Seção de Contato"),
                            ("sobre", "Seção Sobre Nós"),
                            ("produtos", "Lista de Produtos"),
                            ("promocoes", "Seção de Promoções"),
                        ],
                        max_length=20,
                        verbose_name="Tipo do Componente",
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome do Componente"),
                ),
                (
                    "template_html",
                    models.TextField(
                        help_text="Código HTML do componente",
                        verbose_name="Template HTML",
                    ),
                ),
                (
                    "css_componente",
                    models.TextField(
                        blank=True,
                        help_text="CSS específico do componente",
                        null=True,
                        verbose_name="CSS do Componente",
                    ),
                ),
                (
                    "ordem",
                    models.IntegerField(default=0, verbose_name="Ordem de Exibição"),
                ),
                (
                    "ativo",
                    models.BooleanField(default=True, verbose_name="Componente Ativo"),
                ),
                (
                    "criado_em",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "tema",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="componentes",
                        to="core.temarestaurante",
                        verbose_name="Tema",
                    ),
                ),
            ],
            options={
                "verbose_name": "Componente Personalizado",
                "verbose_name_plural": "Componentes Personalizados",
                "db_table": "componentes_personalizados",
                "ordering": ["ordem", "nome"],
            },
        ),
    ]
